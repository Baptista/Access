@model Access.Models.TimeSheet.TimeSheetModel

@{
    ViewData["Title"] = "TimeSheet";
}

<h1>@ViewData["Title"]</h1>

<form id="employeeForm">
    <div class="form-group">
        <label for="Name" class="control-label">Name</label>
        <input id="Name" name="Name" class="form-control" required />
    </div>

    <div class="form-group">
        <label for="Year" class="control-label">Year</label>
        <input id="Year" name="Year" type="number" class="form-control" required />
    </div>

    <div class="form-group">
        <label for="Month" class="control-label">Month</label>
        <select id="Month" name="Month" class="form-control" required>
            @for (int i = 1; i <= 12; i++)
            {
                <option value="@i">@(new DateTime(2000, i, 1).ToString("MMMM"))</option>
            }
        </select>
    </div>

    <div id="calendarContainer" class="mt-3"></div>

    <div class="d-flex justify-content-between align-items-center mt-3">
        <button type="button" id="exportPdf" class="btn btn-primary">Generate PDF</button>
        <div id="totalHoursContainer" class="font-weight-bold"></div>
    </div>
</form>

<div id="messageContainer" class="mt-3"></div>

@section Scripts {
    <script>
        $(document).ready(function () {
            function updateCalendar() {
                var year = $("#Year").val();
                var month = $("#Month").val();
                var daysInMonth = new Date(year, month, 0).getDate();

                var calendarHtml = '<table class="table table-bordered">';
                calendarHtml += '<thead><tr><th>Day</th><th>Day of Week</th><th>Start Time</th><th>End Time</th><th>Total Hours</th></tr></thead>';
                calendarHtml += '<tbody>';

                for (var day = 1; day <= daysInMonth; day++) {
                    var date = new Date(year, month - 1, day);
                    var dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'long' });
                    var isWeekend = (dayOfWeek === 'Saturday' || dayOfWeek === 'Sunday');
                    var defaultStartTime = isWeekend ? '' : '09:00';
                    var defaultEndTime = isWeekend ? '' : '18:00';

                    calendarHtml += '<tr>';
                    calendarHtml += '<td>' + day + '</td>';
                    calendarHtml += '<td>' + dayOfWeek + '</td>';
                    calendarHtml += '<td><input type="time" name="StartTime[' + day + ']" class="form-control" value="' + defaultStartTime + '" /></td>';
                    calendarHtml += '<td><input type="time" name="EndTime[' + day + ']" class="form-control" value="' + defaultEndTime + '" /></td>';
                    calendarHtml += '<td><input type="number" name="TotalHours[' + day + ']" class="form-control" readonly /></td>';
                    calendarHtml += '</tr>';
                }

                calendarHtml += '</tbody></table>';
                $("#calendarContainer").html(calendarHtml);

                // Add event listeners for time inputs
                $("input[type='time']").on('change', function () {
                    updateTotalHours();
                });

                updateTotalHours();
            }

            function calculateTotalHours(startTime, endTime) {
                var start = new Date("1970-01-01T" + startTime + "Z");
                var end = new Date("1970-01-01T" + endTime + "Z");
                var diff = ((end - start) / 3600000) > 0 ? ((end - start) / 3600000) - 1 : 0; // Convert milliseconds to hours
                return diff.toFixed(2);
            }

            function updateTotalHours() {
                var totalMonthHours = 0;
                $("input[name^='StartTime']").each(function (index) {
                    var startTime = $(this).val();
                    var endTime = $("input[name='EndTime[" + (index + 1) + "]']").val();
                    if (startTime && endTime) {
                        var totalHours = calculateTotalHours(startTime, endTime);
                        $("input[name='TotalHours[" + (index + 1) + "]']").val(totalHours);
                        totalMonthHours += parseFloat(totalHours);
                    }
                });
                $("#totalHoursContainer").text("Total Hours: " + totalMonthHours.toFixed(2));
            }

            $("#Year, #Month").change(updateCalendar);
            updateCalendar();

            $("#exportPdf").click(function () {
                var workingHours = {};
                $("input[name^='TotalHours']").each(function () {
                    var day = $(this).attr('name').match(/\d+/)[0];
                    var hours = $(this).val();
                    if (hours) {
                        var date = new Date($("#Year").val(), $("#Month").val() - 1, day);
                        var dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'long' });
                        workingHours[day] = {
                            dayOfWeek: dayOfWeek,
                            startTime: $("input[name='StartTime[" + day + "]']").val(),
                            endTime: $("input[name='EndTime[" + day + "]']").val(),
                            totalHours: parseFloat(hours)
                        };
                    }
                });

                var data = {
                    Name: $("#Name").val(),
                    Year: parseInt($("#Year").val()),
                    Month: parseInt($("#Month").val()),
                    WorkingHours: workingHours
                };

                $.ajax({
                    url: '@Url.Action("ExportToPdf", "TimeSheet")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    xhrFields: {
                        responseType: 'arraybuffer'
                    },
                    success: function (data, status, xhr) {
                        var contentType = xhr.getResponseHeader("Content-Type");
                        if (contentType === "application/pdf") {
                            var blob = new Blob([data], { type: 'application/pdf' });
                            var link = document.createElement('a');
                            link.href = window.URL.createObjectURL(blob);
                            link.download = $("#Name").val() + "_" + $("#Year").val() + "_" + $("#Month").val() + ".pdf";
                            link.click();
                            $("#messageContainer").html('<div class="alert alert-success">PDF generated successfully.</div>');
                        } else {
                            var decoder = new TextDecoder("utf-8");
                            var jsonResponse = JSON.parse(decoder.decode(data));
                            $("#messageContainer").html('<div class="alert alert-danger">' + jsonResponse.message + '</div>');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error(error);
                        var errorMessage = "Error generating PDF. Please try again.";
                        if (xhr.responseText) {
                            try {
                                var jsonResponse = JSON.parse(xhr.responseText);
                                errorMessage = jsonResponse.message || errorMessage;
                            } catch (e) {
                                console.error("Error parsing error response:", e);
                            }
                        }
                        $("#messageContainer").html('<div class="alert alert-danger">' + errorMessage + '</div>');
                    }
                });
            });
        });
    </script>
}

<style>
    #calendarContainer table {
        table-layout: fixed;
    }
    #calendarContainer td {
        vertical-align: middle;
        padding: 5px;
    }
    #calendarContainer input[type="time"],
    #calendarContainer input[type="number"] {
        width: 100%;
    }
    #totalHoursContainer {
        font-size: 1.2em;
    }
</style>